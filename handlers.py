from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import aiohttp

from food_info import calculate_water, get_food_info, calculate_calories, get_calories_burned
from states import Form, LogCalories


router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    )

# FSM: –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(weight=float(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)

@router.message(Form.height)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(height=float(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)

@router.message(Form.age)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(age=float(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_activity_level(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity_level)

@router.message(Form.activity_level)
async def process_—Åalories_target(message: Message, state: FSMContext):
    await state.update_data(activity_level=float(message.text))

    data = await state.get_data()
    calories = calculate_calories(
        weight=data.get("weight"),
        height=data.get("height"), 
        age=data.get("age"),
        activity_level=data.get("activity_level")
    )
    await state.update_data(calories_goal=calories)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–∞"),
                KeyboardButton(text="–ù–µ—Ç"),
            ]
        ],
        resize_keyboard=True,
    )
    await message.reply(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π - {calories}. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(Form.calories_change_request)

@router.message(Form.calories_change_request, F.text.casefold() == "–Ω–µ—Ç")
async def accept_calories(message: Message, state: FSMContext):
    await message.reply("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.finished)


@router.message(Form.calories_change_request, F.text.casefold() == "–¥–∞")
async def request_calories_change(message: Message, state: FSMContext):
    await message.reply("–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –¥–µ–Ω—å?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.changing_calories)

@router.message(Form.changing_calories)
async def changing_calories(message: Message, state: FSMContext):
    await state.update_data(calories=float(message.text))
    await message.reply("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.set_state(Form.finished)

@router.message(Command("get_calories"))
async def start_form(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.reply(f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ - {data.get('calories_goal')} –∫–∞–ª–æ—Ä–∏–π")

@router.message(Command("log_water"))
async def log_water(message: Message, state: FSMContext):
    data = await state.get_data()
    water_norm = await calculate_water(
        weight=data.get("weight"),
        activity_level=data.get("activity_level"),
        city=data.get("city")
    )
    current_water_consumption = data.get("current_water_consumption", 0)
    current_water_consumption += float(message.text.removeprefix('/log_water '))
    await state.update_data(current_water_consumption=current_water_consumption)
    await message.reply(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –≤—ã–ø–∏–ª–∏ {current_water_consumption} –∏–∑ {water_norm} –º–ª –≤–æ–¥—ã")

@router.message(Command("log_calories"))
async def log_calories_product(message: Message, state: FSMContext):
    calories_consumed_by_100g = await get_food_info(
        product_name=message.text.removeprefix('/log_calories ')
    )
    if calories_consumed_by_100g is not None:
        await state.update_data(current_product_calories=calories_consumed_by_100g)
    await message.reply("–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
    await state.set_state(LogCalories.request_quantity)

@router.message(LogCalories.request_quantity)
async def log_calories_amount(message: Message, state: FSMContext):
    amount = float(message.text)
    data = await state.get_data()

    calories_consumption = data.get("calories_consumption", 0)
    consumed = data.get("current_product_calories", 0) * amount / 100
    calories_consumption += consumed
    await state.update_data(calories_consumption=calories_consumption)
    await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed} –∫–∫–∞–ª.")
    await state.set_state(LogCalories.finished)

@router.message(Command("log_workout"))
async def log_workout(message: Message, state: FSMContext):
    data = await state.get_data()
    burned_calories = await get_calories_burned(
        description=message.text.removeprefix('/log_workout '), 
        weight=data.get('weight', 75)
    )
    total_burned_calories = data.get("total_burned_calories", 0)
    total_burned_calories += burned_calories
    await state.update_data(total_burned_calories=total_burned_calories)
    await message.reply(f"–í—ã —Å–æ–∂–≥–ª–∏ {burned_calories} –∫–∫–∞–ª.")


@router.message(Command("check_progress"))
async def check_progress(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("weight"):
        msg = "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ /set_profile"
        await message.reply(msg)
        return


    water_norm = await calculate_water(
        weight=data.get("weight"),
        activity_level=data.get("activity_level"),
        city=data.get("city")
    )
    current_water_consumption = data.get("current_water_consumption", 0)

    calories_consumption = data.get("calories_consumption", 0)
    total_burned_calories = data.get("total_burned_calories", 0)
    calories_goal = data.get("calories_goal", 0)
    msg = f"""üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:
    –í–æ–¥–∞:
    - –í—ã–ø–∏—Ç–æ: {current_water_consumption} –º–ª –∏–∑ {water_norm} –º–ª.
    - –û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_norm - current_water_consumption)} –º–ª.
    
    –ö–∞–ª–æ—Ä–∏–∏:
    - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories_consumption} –∫–∫–∞–ª –∏–∑ {calories_goal} –∫–∫–∞–ª.
    - –°–æ–∂–∂–µ–Ω–æ: {total_burned_calories} –∫–∫–∞–ª.
    - –ë–∞–ª–∞–Ω—Å: {calories_consumption - total_burned_calories} –∫–∫–∞–ª.
    """
    await message.reply(msg)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —à—É—Ç–∫–∏ –∏–∑ API
@router.message(Command("joke"))
async def get_joke(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.chucknorris.io/jokes/random") as response:
            joke = await response.json()
            await message.reply(joke["value"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)
